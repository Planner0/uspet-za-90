import streamlit as st
import json
from datetime import datetime
import os

# –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ URL-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ st.query_params (–Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–±)
query_params = st.query_params
user_id = query_params.get("user_id", "guest").strip()

if not user_id:
    st.stop()

DATA_FILE = f"goal_data__{user_id}.json"

# ------------------- –§—É–Ω–∫—Ü–∏–∏ -------------------

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return None

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def calculate_day(start_date):
    today = datetime.today().date()
    delta = today - datetime.strptime(start_date, "%Y-%m-%d").date()
    return min(delta.days + 1, 90)

# ------------------- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å -------------------

st.set_page_config(page_title="–£—Å–ø–µ—Ç—å –∑–∞ 90 –¥–Ω–µ–π", layout="centered")
st.title("üöÄ –£—Å–ø–µ—Ç—å –∑–∞ 90 –¥–Ω–µ–π")

st.markdown(f"üë§ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫: **{user_id}**")

data = load_data()

if not data:
    st.subheader("–ù–∞—á–Ω–∏ —Å –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏:")
    goal = st.text_input("üéØ –í–≤–µ–¥–∏ —Å–≤–æ—é —Ü–µ–ª—å")
    description = st.text_area("üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏", height=100)
    if st.button("üîí –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª—å"):
        if goal.strip() == "":
            st.warning("–¶–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!")
        else:
            start_date = datetime.today().strftime("%Y-%m-%d")
            data = {
                "goal": goal,
                "description": description,
                "start_date": start_date,
                "completed_days": [],
                "tasks": {}
            }
            save_data(data)
            st.rerun()
else:
    day = calculate_day(data["start_date"])
    st.subheader(f"üìÖ –°–µ–≥–æ–¥–Ω—è: –î–µ–Ω—å {day} –∏–∑ 90")
    st.progress(day / 90)

    st.markdown(f"**üéØ –¶–µ–ª—å:** {data['goal']}")
    if data["description"]:
        st.markdown(f"**üìù –û–ø–∏—Å–∞–Ω–∏–µ:** {data['description']}")

    today_str = datetime.today().strftime("%Y-%m-%d")
    today_tasks = data["tasks"].get(today_str, [])

    with st.form("tasks_form"):
        new_task = st.text_input("–î–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:")
        if st.form_submit_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å"):
            if new_task.strip():
                today_tasks.append(new_task)
                data["tasks"][today_str] = today_tasks
                save_data(data)
                st.rerun()

    st.markdown("### üìã –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:")
    if today_tasks:
        for i, task in enumerate(today_tasks):
            col1, col2 = st.columns([0.8, 0.2])
            col1.write(f"- {task}")
            if col2.button("‚úÖ", key=f"done_{i}"):
                today_tasks.pop(i)
                data["tasks"][today_str] = today_tasks
                save_data(data)
                st.rerun()
    else:
        st.info("–ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")

    if today_str not in data["completed_days"]:
        if st.button("‚òëÔ∏è –û—Ç–º–µ—Ç–∏—Ç—å –¥–µ–Ω—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π"):
            data["completed_days"].append(today_str)
            save_data(data)
            st.success("–î–µ–Ω—å –∑–∞—Å—á–∏—Ç–∞–Ω!")
            st.rerun()
    else:
        st.success("‚úÖ –≠—Ç–æ—Ç –¥–µ–Ω—å —É–∂–µ –æ—Ç–º–µ—á–µ–Ω.")

    with st.expander("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"):
        if st.button("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
            os.remove(DATA_FILE)
            st.rerun()
